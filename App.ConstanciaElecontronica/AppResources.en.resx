<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Accept" xml:space="preserve">
    <value>Accept</value>
  </data>
  <data name="Age" xml:space="preserve">
    <value>Age:</value>
  </data>
  <data name="Brother" xml:space="preserve">
    <value>Brother/Sister</value>
  </data>
  <data name="Clear" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="cousin" xml:space="preserve">
    <value>Cousin</value>
  </data>
  <data name="Father" xml:space="preserve">
    <value>Father</value>
  </data>
  <data name="Friend" xml:space="preserve">
    <value>Friend</value>
  </data>
  <data name="Gender" xml:space="preserve">
    <value>Gender:</value>
  </data>
  <data name="Information" xml:space="preserve">
    <value>Patient information</value>
  </data>
  <data name="Married" xml:space="preserve">
    <value>Husband/Wife</value>
  </data>
  <data name="Mother" xml:space="preserve">
    <value>Mother</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="NumDoc" xml:space="preserve">
    <value>Document number:</value>
  </data>
  <data name="Other" xml:space="preserve">
    <value>Other</value>
  </data>
  <data name="Patient" xml:space="preserve">
    <value>Patient:</value>
  </data>
  <data name="PName" xml:space="preserve">
    <value>Complete name</value>
  </data>
  <data name="PNumDoc" xml:space="preserve">
    <value>Identification number</value>
  </data>
  <data name="pSon" xml:space="preserve">
    <value>i.e. son 1</value>
  </data>
  <data name="Relation" xml:space="preserve">
    <value>Relation:</value>
  </data>
  <data name="SelectedOption" xml:space="preserve">
    <value>select an option</value>
  </data>
  <data name="Sing" xml:space="preserve">
    <value>Signature on the line</value>
  </data>
  <data name="Son" xml:space="preserve">
    <value>Son/Daughter</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Data treatment authorization</value>
  </data>
  <data name="titleAccompanying" xml:space="preserve">
    <value>Information for accompanying person</value>
  </data>
  <data name="TypeDoc" xml:space="preserve">
    <value>Document Type:</value>
  </data>
  <data name="which" xml:space="preserve">
    <value>Which?:</value>
  </data>
  <data name="document" xml:space="preserve">
    <value>By signing this manifest document, I have been informed by the admissions staff of the SAN IGNACIO UNIVERSITY HOSPITAL (hereinafter "HUSI") that:
                            
    a. On the occasion of my health care, the HUSI must collect my personal data and undertakes to use them responsibly and confidentially, in accordance with the HUSI's Personal Data Treatment Policy available at www.husi.org.co

    b. That in the course of my care I will have to give personal, sensitive and private information and that it will be handled with strict adherence to the Constitution, the Law and the published internal policy.

    c. That I must also provide information related to my identification, social security affiliation, address, economic activity, among other data, which the law requires for the correct identification of users of health services.

    d. That in cases defined in Colombian legal regulations, the HUSI must share the information collected with the health authorities and with other members of the social security system, without this constituting a violation of my rights.

    e. That I promise to provide accurate and complete information on both my personal data and my medical history and that I have been informed that any inconsistencies that are eventually detected will be reported to the competent authorities.

    f. That I have the right to request the correction of errors recorded in my medical records and other health care records, following the due process provided by law.

    g. That my rights can be exercised through the free channels provided by the HUSI and observing the HUSI's Personal Data Treatment Policy

    h. That any concern or information related to the processing of personal data, I can contact the User Service Office in Carrera 7 N ° 40-62 First Floor. Bogotá D.C., Email: atencionusuario@husi.org.co, Telephone: 5946161 ext. 2127.

    Based on the information received, I authorize the processing of data necessary for my care and its administration in accordance with the legal regulations and the HUSI Personal Data Processing Policy.</value>
  </data>
  <data name="diplomatCard" xml:space="preserve">
    <value>Diplomat Card</value>
  </data>
  <data name="foreignCertificate" xml:space="preserve">
    <value>Foreign certificate</value>
  </data>
  <data name="ForeignerCard" xml:space="preserve">
    <value>Foreigner's identification card</value>
  </data>
  <data name="ONUpassport" xml:space="preserve">
    <value>ONU passport</value>
  </data>
  <data name="passport" xml:space="preserve">
    <value>Passport</value>
  </data>
  <data name="specialPermission" xml:space="preserve">
    <value>Special permission to reside</value>
  </data>
  <data name="ColombianCard" xml:space="preserve">
    <value>Colombian ID</value>
  </data>
  <data name="IdentityCard" xml:space="preserve">
    <value>Colombian Identity card</value>
  </data>
  <data name="SafeConduct" xml:space="preserve">
    <value>Safe conduct in Permanence</value>
  </data>
  <data name="adutlWithOut" xml:space="preserve">
    <value>Adult without ID</value>
  </data>
  <data name="civilRegistry" xml:space="preserve">
    <value>Civil registry</value>
  </data>
  <data name="liveBirth" xml:space="preserve">
    <value>Live birth</value>
  </data>
  <data name="minorWithOut" xml:space="preserve">
    <value>Minor without ID</value>
  </data>
</root>